# -*- coding: utf-8 -*-
"""Task_4_Breast_Cancer_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JquP50fpp5Cr1yc9dIAG4mFBYw-nHbao
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, precision_score, recall_score, roc_auc_score, roc_curve
import matplotlib.pyplot as plt

# Load dataset (replace with your local path if downloaded manually)
df = pd.read_csv("data.csv")

# Drop 'id' column if exists
if 'id' in df.columns:
    df = df.drop('id', axis=1)

# Drop empty column if present
df = df.dropna(axis=1, how='all')

# Encode target column 'diagnosis' (M=1, B=0)
target_col = 'diagnosis'
le = LabelEncoder()
df[target_col] = le.fit_transform(df[target_col])

# Features & Target
X = df.drop(target_col, axis=1)
y = df[target_col]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Standardize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train Logistic Regression
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:, 1]

# Metrics
cm = confusion_matrix(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_prob)

print("Confusion Matrix:\n", cm)
print("Precision:", precision)
print("Recall:", recall)
print("ROC-AUC:", roc_auc)

# ROC Curve
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
plt.plot(fpr, tpr, label=f"ROC curve (AUC = {roc_auc:.2f})")
plt.plot([0, 1], [0, 1], linestyle='--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.legend()
plt.show()

# Threshold tuning
threshold = 0.3
y_pred_new = (y_prob >= threshold).astype(int)
cm_new = confusion_matrix(y_test, y_pred_new)
print(f"Confusion Matrix at threshold {threshold}:\n", cm_new)

# Sigmoid function
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

z_values = np.linspace(-10, 10, 100)
plt.plot(z_values, sigmoid(z_values))
plt.title("Sigmoid Function")
plt.xlabel("z")
plt.ylabel("sigmoid(z)")
plt.show()

