# -*- coding: utf-8 -*-
"""Task_5 - Heart Disease Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RiyOSUdxCTy9X_9-zXHN0erF02w1Wpo_
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier, plot_tree
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('heart.csv')

# Split features and target
X = df.drop('target', axis=1)
y = df['target']

# Train Decision Tree
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X, y)

# Visualize the tree
plt.figure(figsize=(20,10))
plot_tree(dt_model, feature_names=X.columns, class_names=['No Disease', 'Disease'], filled=True)
plt.show()

from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Try different max_depth values
for depth in range(1, 11):
    model = DecisionTreeClassifier(max_depth=depth, random_state=42)
    model.fit(X_train, y_train)
    train_acc = accuracy_score(y_train, model.predict(X_train))
    test_acc = accuracy_score(y_test, model.predict(X_test))
    print(f"Depth: {depth}, Train Acc: {train_acc:.2f}, Test Acc: {test_acc:.2f}")

from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

rf_train_acc = accuracy_score(y_train, rf_model.predict(X_train))
rf_test_acc = accuracy_score(y_test, rf_model.predict(X_test))

print(f"Random Forest - Train Acc: {rf_train_acc:.2f}, Test Acc: {rf_test_acc:.2f}")

import seaborn as sns

# Feature importances
importances = pd.Series(rf_model.feature_importances_, index=X.columns)
importances.sort_values().plot(kind='barh', figsize=(10,6), title="Feature Importances")
plt.show()

from sklearn.model_selection import cross_val_score

# Decision Tree CV
dt_cv_scores = cross_val_score(dt_model, X, y, cv=5)
print(f"Decision Tree CV Accuracy: {dt_cv_scores.mean():.2f}")

# Random Forest CV
rf_cv_scores = cross_val_score(rf_model, X, y, cv=5)
print(f"Random Forest CV Accuracy: {rf_cv_scores.mean():.2f}")

